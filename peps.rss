<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>Newest Python PEPs</title>
    <link>https://peps.python.org/</link>
    <description>Newest Python Enhancement Proposals (PEPs): Information on new language features and some meta-information like release procedure and schedules.</description>
    <atom:link href="https://peps.python.org/peps.rss" rel="self"/>
    <docs>https://cyber.harvard.edu/rss/rss.html</docs>
    <language>en</language>
    <lastBuildDate>Sat, 30 Aug 2025 16:17:11 GMT</lastBuildDate>
    <item>
      <title>PEP 775: Make zlib required to build CPython</title>
      <link>https://peps.python.org/pep-0775/</link>
      <description>Building CPython without the zlib compression library will no be longer supported, and the zlib module will be required in the standard library. The only exception is WASI, as zlib is not currently supported in CPython on WASI. Building the interpreter without zlib may still be possible, but formally unsupported.</description>
      <author>Gregory P. Smith (greg@krypto.org), Stan Ulbrych (stanulbrych@gmail.com), Petr Viktorin (encukou@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0775/</guid>
      <pubDate>Mon, 24 Feb 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 774: Removing the LLVM requirement for JIT builds</title>
      <link>https://peps.python.org/pep-0774/</link>
      <description>Since Python 3.13, CPython has been able to be configured and built with an experimental just-in-time (JIT) compiler via the --enable-experimental-jit flag on Linux and Mac and --experimental-jit on Windows. To build CPython with the JIT enabled, users are required to have LLVM installed on their machine (initially, with LLVM 16 but more recently, with LLVM 19). LLVM is responsible for generating stencils that are essential to our copy-and-patch JIT (see PEP 744). These stencils are predefined, architecture-specific templates that are used to generate machine code at runtime.</description>
      <author>Savannah Ostrowski (savannah@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0774/</guid>
      <pubDate>Mon, 27 Jan 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 773: A Python Installation Manager for Windows</title>
      <link>https://peps.python.org/pep-0773/</link>
      <description>Installation of the python.org Python distribution on Windows is complex. There are three main approaches with roughly equivalent levels of user experience, and yet all of these suffer from different limitations, including failing to satisfy modern usage scenarios. This PEP proposes a design for a single Windows install workflow tool that satisfies all the needs of the existing installers for the platform, while avoiding most of their limitations, and provides the core team with the ability to manage releases for many years to come.</description>
      <author>Steve Dower</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0773/</guid>
      <pubDate>Tue, 21 Jan 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 772: Packaging governance process</title>
      <link>https://peps.python.org/pep-0772/</link>
      <description>This PEP proposes a Python Packaging Council with broad authority over packaging standards, tools, and implementations. Like the Python Steering Council, the Packaging Council seeks to exercise this authority as rarely as possible; instead, they use this power to establish standard processes.</description>
      <author>Barry Warsaw (barry@python.org), Deb Nicholson (deb@python.org), Pradyun Gedam (pradyunsg@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0772/</guid>
      <pubDate>Tue, 21 Jan 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 771: Default Extras for Python Software Packages</title>
      <link>https://peps.python.org/pep-0771/</link>
      <description>PEP 508 specifies a mini-language for declaring package dependencies. One feature of this language is the ability to specify extras, which are optional components of a distribution that, when used, install additional dependencies. This PEP proposes a mechanism to allow one or more extras to be installed by default if none are provided explicitly.</description>
      <author>Thomas Robitaille (thomas.robitaille@gmail.com), Jonathan Dekhtiar (jonathan@dekhtiar.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0771/</guid>
      <pubDate>Mon, 13 Jan 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 770: Improving measurability of Python packages with Software Bill-of-Materials</title>
      <link>https://peps.python.org/pep-0770/</link>
      <description>Almost all Python packages today are accurately measurable by software composition analysis (SCA) tools. For projects that are not accurately measurable, there is no existing mechanism to annotate a Python package with composition data to improve measurability.</description>
      <author>Seth Larson (seth@python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0770/</guid>
      <pubDate>Thu, 02 Jan 2025 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 769: Add a 'default' keyword argument to 'attrgetter', 'itemgetter' and 'getitem'</title>
      <link>https://peps.python.org/pep-0769/</link>
      <description>This proposal aims to enhance the operator module by adding a default keyword argument to the attrgetter, itemgetter and getitem functions. This addition would allow these functions to return a specified default value when the targeted attribute or item is missing, thereby preventing exceptions and simplifying code that handles optional attributes or items.</description>
      <author>Facundo Batista (facundo@taniquetil.com.ar)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0769/</guid>
      <pubDate>Sun, 22 Dec 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 768: Safe external debugger interface for CPython</title>
      <link>https://peps.python.org/pep-0768/</link>
      <description>This PEP proposes adding a zero-overhead debugging interface to CPython that allows debuggers and profilers to safely attach to running Python processes. The interface provides safe execution points for attaching debugger code without modifying the interpreter’s normal execution path or adding runtime overhead.</description>
      <author>Pablo Galindo Salgado (pablogsal@python.org), Matt Wozniski (godlygeek@gmail.com), Ivona Stojanovic (stojanovic.i@hotmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0768/</guid>
      <pubDate>Mon, 25 Nov 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 767: Annotating Read-Only Attributes</title>
      <link>https://peps.python.org/pep-0767/</link>
      <description>PEP 705 introduced the typing.ReadOnly type qualifier to allow defining read-only typing.TypedDict items.</description>
      <author>Eneg (eneg at discuss.python.org)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0767/</guid>
      <pubDate>Mon, 18 Nov 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>PEP 766: Explicit Priority Choices Among Multiple Indexes</title>
      <link>https://peps.python.org/pep-0766/</link>
      <description>Package resolution is a key part of the Python user experience as the means of extending Python’s core functionality. The experience of package resolution is mostly taken for granted until someone encounters a situation where the package installer does something they don’t expect.  The installer behavior with multiple indexes has been a common source of unexpected behavior.  Through its ubiquity, pip has long defined the standard expected behavior across other tools in the ecosystem, but Python installers are diverging with respect to how they handle multiple indexes. At the core of this divergence is whether index contents are combined before resolving distributions, or each index is handled individually in order. pip merges all indexes before matching distributions, while uv matches distributions on one index before moving on to the next. Each approach has advantages and disadvantages.  This PEP aims to describe each of these behaviors, which are referred to as “version priority” and “index priority” respectively, so that community discussions and troubleshooting can share a common vocabulary, and so that tools can implement predictable behavior based on these descriptions.</description>
      <author>Michael Sarahan (msarahan@gmail.com)</author>
      <guid isPermaLink="true">https://peps.python.org/pep-0766/</guid>
      <pubDate>Mon, 18 Nov 2024 00:00:00 GMT</pubDate>
    </item>
  </channel>
</rss>
